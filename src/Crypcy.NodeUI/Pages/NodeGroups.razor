@page "/groups"
@using Crypcy.NodeUI.Models;
@using Crypcy.NodeUI.Services
@using Crypcy.NodeUI.Components
@using static Crypcy.NodeUI.Components.GroupModal;
@inject NodeUiService UiService

<div class="main-container container-fluid bg-dark text-white">
    <div class="row">
        <div class="chat-container col-md-8 p-0 d-flex flex-column">
            <div class="chat-header p-2 d-flex justify-content-between align-items-center">
                @if (selectedGroup != null)
                {
                    <h5 class="text-white m-0">Group: @selectedGroup.Name</h5>
                }
            </div>
            <div class="chat-body overflow-auto p-4 bg-secondary flex-grow-1">
                <div class="messages">
                    @if (selectedGroup != null)
                    {
                        @foreach (var message in selectedGroup.Messages)
                        {
                            <div class="message @(message.Sender == nodeName ? "text-right" : "")">
                                <strong>@message.Sender</strong>: @message.Text
                            </div>
                        }
                    }
                </div>
            </div>
            <div class="chat-footer p-2 d-flex align-items-center">
                <input type="text" class="form-control w-100" placeholder="Enter message..." @bind-value="message" @bind-value:event="oninput" />
                <button type="button" class="btn btn-primary" @onclick="() => SendMessage()">Send</button>
            </div>
        </div>
        <div class="node-groups col-md-4 bg-dark p-0 flex-grow-1">
            <div class="p-4 d-flex flex-column">
                <h4 class="m-0">Node Groups</h4>
                <button type="button" class="btn btn-primary" @onclick="() => DisplayCreateGroup()">Create Group</button>
                <ul class="list-unstyled">
                    @foreach (var group in nodeGroups)
                    {
                        <li @onclick="() => SelectGroup(group)" class="@(group == selectedGroup ? "text-primary font-weight-bold" : "")">
                            <i class="fa fa-hashtag mr-2" aria-hidden="true">@group.Name</i>
                            <ul class="list-group">
                                @foreach (var node in group.Nodes)
                                {
                                    <li class="list-group-item">@node</li>
                                }
                            </ul>
                        </li>
                    }
                </ul>
            </div>
        </div>
    </div>
</div>

@if (CreateGroupDisplay)
{
    <GroupModal ConnectedNodes=connectedNodes  OnClose="@OnCreateGroupClose" ></GroupModal>
}




@code {

    private string nodeName { get; set; } = "User 1";
    private string message { get; set; }

    private NodeGroup selectedGroup { get; set; }
    private List<NodeGroup> nodeGroups { get; set; }
    private List<string> connectedNodes;

    public bool CreateGroupDisplay { get; set; }

    private void OnCreateGroupClose(CreateGroupData data)
    {
        if (data.Accepted)
        {
            CreateNodeGroup(data.NodeGroup);
        }
        CreateGroupDisplay = false;
        StateHasChanged();
    }

    private void DisplayCreateGroup()
    {
        CreateGroupDisplay = true;
        StateHasChanged();
    }

    void CreateNodeGroup(NodeGroup nodeGroup)
    {
        nodeGroups.Add(nodeGroup);
        UiService.NodeGroupAdd(nodeGroup.Name, nodeGroup.Nodes);
    }


    protected override void OnInitialized()
    {
        connectedNodes = UiService.GetConnectedNodes();

        if (nodeGroups == null)
            nodeGroups = new List<NodeGroup>();
        else
            selectedGroup = nodeGroups.FirstOrDefault();
    }


    void SelectGroup(NodeGroup group)
    {
        selectedGroup = group;
    }

    void SendMessage()
    {
        if (selectedGroup != null)
        {
            selectedGroup.Messages.Add(new Message { Sender = nodeName, Text = message });
            UiService.NodeSendGroupMessage(selectedGroup.Name, message);
            message = "";
        }
    }

}

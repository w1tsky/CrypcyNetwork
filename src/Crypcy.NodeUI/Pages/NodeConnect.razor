@page "/connect"
@using Crypcy.NodeUI.Services
@using System.Reactive.Linq;
@inject NodeUiService UiService

<div class="container-fluid">
    <div class="row">
        <div class="col-md-6">
            <h1>Connect to Node</h1>

            <form>
                <div class="form-group">
                    <label for="ipAddress">IP Address:</label>
                    <input type="text" class="form-control" id="ipAddress" placeholder="Enter IP address" @bind-value="ip" @bind-value:event="oninput">
                </div>
                <div class="form-group">
                    <label for="port">Port:</label>
                    <input type="text" class="form-control" id="port" placeholder="Enter port" @bind-value="port" @bind-value:event="oninput">
                </div>
                <button type="submit" class="btn btn-primary" @onclick="() => ConnectToNode(ip, port)">Connect</button>
            </form>
        </div>
        <div class="col-md-6">
            <h2>Connected Nodes</h2>
            <ul class="list-group">
                @foreach (var node in connectedNodes)
                {
                    <li class="list-group-item">@node</li>
                }
            </ul>
        </div>
    </div>
</div>

@code {
    List<string> connectedNodes;

    private string ip;
    private int port;

    protected override void OnInitialized()
    {
        connectedNodes = UiService.GetConnectedNodes();
        UiService.OnNodeConnected += async (node) => await InvokeAsync(() =>
        {
            StateHasChanged();
        });
        UiService.OnNodeDisconnected += async (node) => await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }


    void ConnectToNode(string ipAddress, int port)
    {
        UiService.NodeConnect(ipAddress, port);
    }
}
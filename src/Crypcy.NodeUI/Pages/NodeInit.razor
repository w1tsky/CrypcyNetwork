@page "/node"
@using Crypcy.ApplicationCore;
@using Crypcy.Communication.Network;
@using Crypcy.NodeUI.Components
@using Crypcy.NodeUI.NodeLogic;
@using Crypcy.NodeUI.Models;



<div class="container-fluid h-100">
    <div class="row h-100">
        <div class="col-3 p-0 h-100 border-right overflow-auto">
            <h2 class="bg-primary text-white p-3 m-0">Nodes Connected</h2>
            <ul class="list-unstyled p-3">
                @foreach (var node in _nodes)
                {
                    <li class="text-secondary font-weight-bold">@node</li>
                }
            </ul>
        </div>
        <div class="col-9 p-0 h-100 overflow-auto">
            <div class="bg-light p-3">
                @foreach (var message in _messages)
                {

                    <div class="font-weight-bold text-secondary">@message.NodeSender</div>
                    <div class="font-weight-normal">@message.NodeMessageText</div>

                }
            </div>
            <form class="bg-light p-3">
                <div class="form-group">
                    <input type="text" class="form-control" placeholder="Enter a message..." />
                </div>
                <button type="submit" class="btn btn-primary">Send</button>
            </form>
        </div>
    </div>
</div>

@code {

    List<string> _nodes = new List<string>();
    List<NodeMessage> _messages = new List<NodeMessage>();


    protected override void OnInitialized()
    {
        var _ui = new UiImpl();
        var network = new TcpNetwork();
        var nodes = new Nodes(network, _ui);

        network.Start(23551);

        _ui.OnNodeConnected += NodeConnected;
        _ui.OnNodeDiconnected += NodeDiconnected;
        _ui.OnMessageReceived += ReceiveMessage;
    }


    private async void NodeConnected(string node)
    {

        await InvokeAsync(() =>
        {
            _nodes.Add(node);
            StateHasChanged();
        });

    }

    private async void NodeDiconnected(string node)
    {
        await InvokeAsync(() =>
            {
                _nodes.Remove(node);
                StateHasChanged();
            });
    }

    private async void ReceiveMessage(string node, string message)
    {
        await InvokeAsync(() =>
        {
            _messages.Add(new NodeMessage
                    {
                        NodeSender = node,
                        NodeMessageText = message,
                    });
            StateHasChanged();
        });
    }
}

